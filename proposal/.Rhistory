library(knitr)
library(tidyverse)
library(broom)
library(htmltools)
library(janitor)
library(kableExtra)
opts_chunk$set(echo=FALSE) # hide source code in the document
knitr::opts_chunk$set(fig.width=7, fig.height=3.5)
Election_results <- read.csv("../data/Translated/elect_results_t.csv")
Properties_rooms <- read.csv("../data/Translated/properties_by_rooms_t.csv")
Purcheuses <- read.csv("../data/Translated/property_purchases_t.csv")
Vacant_apartments <- read.csv("../data/Translated/vacant_apartments_t.csv")
Election_results
Properties_rooms
Purcheuses
Vacant_apartments
# Renaming the Hebrew variables:
Election_results <- Election_results %>%
rename(
Avoda = "אמת",
Hofesh_Calcali = "אצ",
Habait_Hayhudi = "ב",
Yahadut_Hator = "ג",
Balad = "ד",
Hadash = "ום",
Shahar_Koach = "ז",
Kama = "זך",
Koach_Lehaspia = "זנ",
Tsomet = "זץ",
Tsionot_Datit = "ט",
Israel_Hofshit = "י",
Hacalalit = "יז",
Ihud_Benei_Brit = "ינ",
Tsav_Hashaa = "יץ",
Gush_Tanachi = "יק",
Machane_Mamalachti = "כן",
Ani_VeAta = "ך",
Israel_beitenu = "ל",
Halicud = "מחל",
Merets = "מרצ",
Kvod_Haadam = "נז",
Nativ = "ני",
Shema = "נף",
Atsmaiem = "נץ",
Yesh_kivun = "נק",
Anachnu = "נר",
Reshima_Aravit = "עם",
Yesh_atid = "פה",
Piratim = "ף",
Tseirim_boarim = "צ",
Manhigut_Hevratit = "ץ",
Kol_Hasviva = "ק",
Halev_hayehudi = "קי",
Seder_hadash = "קך",
Kol_koveaa = "קנ",
Beomets = "קץ",
Reshimat_34 = "רז",
Shas = "שס",
Ale_yarok = "ת"
)
# mutate the names of the cities that are in other datasets.
Election_results <- Election_results %>%
mutate(
settlement.name = case_when(
settlement.name =="horizons" ~ "Ofakim",
settlement.name =="The view of the Galilee" ~ "Nof Hagalil",
settlement.name == "my peace" ~  "Shlomi" ,
settlement.name == "routes" ~ "Netivot",
TRUE ~ settlement.name  # Keeps other values unchanged
)
)
Properties_rooms_Citynames <- Properties_rooms[!duplicated(Properties_rooms$CityLMSName_Translated),]
#mutate the names of the cities
Properties_rooms <- Properties_rooms %>%
mutate(
CityLMSName_Translated = case_when(
CityLMSName_Translated =="horizons" ~ "Ofakim",
CityLMSName_Translated =="The view of the Galilee" ~ "Nof Hagalil",
CityLMSName_Translated == "my peace" ~  "Shlomi" ,
CityLMSName_Translated == "routes" ~ "Netivot",
TRUE ~ CityLMSName_Translated  # Keeps other values unchanged
)
)
# replace the columns with translated columns
Properties_rooms$CityLMSName <- Properties_rooms$CityLMSName_Translated
Properties_rooms <- Properties_rooms %>% clean_names()
# remove duplicated translated columns
Properties_rooms <- Properties_rooms[, !grepl("translated$", names(Properties_rooms))]
# check city names:
# Purcheuses_names <- Purcheuses[!duplicated(Purcheuses$Lamas_name_translated),]
# Purcheuses_names <- Purcheuses_names[c("Lamas_name","Lamas_name_translated")]
# Purcheuses_names
# preform the same for the other datasets
Purcheuses <- Purcheuses %>%
mutate(
Lamas_name_translated = case_when(
Lamas_name_translated =="horizons" ~ "Ofakim",
Lamas_name_translated =="The view of the Galilee" ~ "Nof Hagalil",
Lamas_name_translated == "my peace" ~  "Shlomi" ,
Lamas_name_translated == "routes" ~ "Netivot",
Lamas_name_translated == "streets" ~ "Rehovot",
Lamas_name_translated == "רחובות" ~ "Rehovot",
Lamas_name_translated == "fresh" ~ "Raanana",
TRUE ~ Lamas_name_translated  # Keeps other values unchanged
)
)
Purcheuses$Lamas_name <- Purcheuses$Lamas_name_translated
Purcheuses <- Purcheuses[, !grepl("translated$", names(Purcheuses))]
Purcheuses <- Purcheuses %>% clean_names()
# Vacant_apartments_names <- Vacant_apartments[!duplicated(Vacant_apartments$CityLmsName_Translated),]
# Vacant_apartments_names <- Vacant_apartments_names[c("CityLmsName","CityLmsName_Translated")]
# Vacant_apartments_names
Vacant_apartments <- Vacant_apartments %>%
mutate(
CityLmsName_Translated = case_when(
CityLmsName_Translated =="horizons" ~ "Ofakim",
CityLmsName_Translated =="The view of the Galilee" ~ "Nof Hagalil",
CityLmsName_Translated == "my peace" ~  "Shlomi" ,
CityLmsName_Translated == "routes" ~ "Netivot",
CityLmsName_Translated == "my peace" ~ "Shlomi",
TRUE ~ CityLmsName_Translated  # Keeps other values unchanged
)
)
Vacant_apartments$CityLmsName <- Vacant_apartments$CityLmsName_Translated
Vacant_apartments$CompanyName <- Vacant_apartments$CompanyName_Translated
Vacant_apartments$StatusName <- Vacant_apartments$StatusName_Translated
Vacant_apartments$PropertyTypeName <- Vacant_apartments$PropertyTypeName_Translated
Vacant_apartments <- Vacant_apartments[, !grepl("translated$", names(Vacant_apartments))]
Vacant_apartments <- Vacant_apartments %>% clean_names()
#renaming elections table:
Election_results <- Election_results %>%
mutate(
settlement.name = case_when(
settlement.name =="horizons" ~ "Ofakim",
settlement.name =="The view of the Galilee" ~ "Nof Hagalil",
settlement.name == "my peace" ~  "Shlomi" ,
settlement.name == "routes" ~ "Netivot",
settlement.name == "my peace" ~ "Shlomi",
settlement.name == "streets" ~ "Rehovot",
settlement.name == "רחובות" ~ "Rehovot",
settlement.name == "fresh" ~ "Raanana",
TRUE ~ settlement.name  # Keeps other values unchanged
)
)
Vacant_apartments
Purcheuses <- Purcheuses %>%
rename(
city_lms_name = "lamas_name"
)
Purcheuses
Properties_rooms
results_head <- head(Election_results,8)
# knitr::kable(results_head, col.names = gsub("[.]", " ", names(results_head)))
results_head
properties_head <- head(Properties_rooms,8)
# knitr::kable(properties_head, col.names = gsub("[.]", " ", names(properties_head)))
properties_head
purcheses_head <- head(Purcheuses,8)
# knitr::kable(purcheses_head, col.names = gsub("[.]", " ", names(purcheses_head)))
purcheses_head
vacant_apartments_head <- head(Vacant_apartments,8)
# knitr::kable(vacant_apartments_head, col.names = gsub("[.]", " ", names(vacant_apartments_head)))
vacant_apartments_head
Vacant_apartments_by_company <- Vacant_apartments %>% group_by(company_name) %>%  mutate(count = n())
Vacant_apartments_by_company <- select(Vacant_apartments_by_company,company_name,count)
Vacant_apartments_by_company <- distinct(Vacant_apartments_by_company, .keep_all = TRUE)
summary(Vacant_apartments)
summary(Properties_rooms)
summary(Purcheuses)
Properties_rooms
columns_subset <- Properties_rooms[, 3:ncol(Properties_rooms)]
sum_by_room <- colSums(columns_subset)
total_sum <- sum(sum_by_room)
column_percentages <- (sum_by_room / total_sum) * 100
column_percentages
sum_by_room
Vacant_apartments_count <- Vacant_apartments %>% group_by(city_lms_name) %>%  mutate(count = n())
custom_colors <- c("1" = "#4281A4", "1.5" = "#9CAFB7", "2" = "#EAD2AC", "2.5" = "#E6B89C", "3" = "#FE938C", "3.5" = "#DC3F34", "4" = "#870E06", "5" = "#3E3E3B")
ggplot(data = Vacant_apartments_count,
mapping = aes( x= reorder(city_lms_name ,-count), fill = factor (num_of_rooms))) +
geom_bar() + #fill='steelblue'
scale_fill_manual(values = custom_colors) +
theme(axis.text.x=element_text(angle = -90, hjust = 0)) +
labs(x = "City", y = "Aartments", title = "Number of available apartments by city",fill = "Number of rooms",subtitle = "collected in May 24")
custom_colors <- c("2017" = "#4281A4", "2018" = "#9CAFB7", "2019" = "#EAD2AC", "2020" = "#E6B89C", "2021" = "#FE938C", "2022" = "#DC3F34", "2023" = "#870E06", "2024" = "#3E3E3B")
ggplot(data = Purcheuses,
mapping = aes( x= city_lms_name, fill = factor(year))) +
geom_bar() +
scale_fill_manual(values = custom_colors) +
theme(axis.text.x=element_text(angle = -90, hjust = 0))+
labs(x = "City", y = "Apartments bought", title = "Apartments bought each year by City", fill = "Year", subtitle = "From 2017 to 2024")
Properties_room_sum <- Properties_rooms %>%
group_by(city_lms_name) %>%
summarise(total = sum(one_rooms + two_rooms + three_rooms + four_rooms + five_rooms + six_rooms + seven_rooms +  eight_rooms + nine_rooms + ten_rooms + more_rooms, na.rm = TRUE))
Properties_room_sum_filtered <- Properties_room_sum %>%
filter(total > 300)
Properties_room_sum_filtered2 <- Properties_room_sum %>%
filter(total < 100)
# Create the bar plot with color gradient fill
ggplot(data = Properties_room_sum_filtered, mapping = aes(x = reorder(city_lms_name, -total), y = total, fill = total)) +
geom_col(width = 0.7, position = position_dodge(width = 0.9)) +
scale_fill_gradient(low = "grey", high = "red") +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5, margin = margin(t = 10))) +
labs(x = "City name", y = "Total apartments", title = "Total apartments by City", subtitle = "Where there are more than 300 apartments in the city") +
theme(plot.margin = margin(10, 10, 10, 10),
axis.line = element_line(colour = "darkgrey")) +
scale_x_discrete(expand = expansion(mult = c(-1, -1)))
cat(readLines('../data/README.md'), sep = '\n')
